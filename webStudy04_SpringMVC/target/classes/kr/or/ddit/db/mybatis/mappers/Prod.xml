<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prod.dao.ProdDAO">

	<resultMap type="ProdVO" id="prodMap" autoMapping="true">
		<id property="prodId" column="PROD_ID"/>
		<collection property="memberList" ofType="MemberVO" autoMapping="true">
			<id property="memId" column="MEM_ID"/>
		</collection>
	</resultMap>
	
	<select id="selectProd" parameterType="string" resultMap="prodMap">
		WITH BUYERCNT AS(
		    SELECT BUYER_ID, BUYER_NAME, BUYER_ADD1, BUYER_COMTEL
		        , (SELECT COUNT(*) FROM PROD WHERE PROD_BUYER = BUYER_ID) PROD_CNT
		    FROM BUYER
		), PRODVIEW AS(
		    SELECT PROD.*, LPROD_NM
		    FROM PROD INNER JOIN LPROD ON (PROD_LGU = LPROD_GU)
		), CARTMEM AS (
            SELECT DISTINCT CART_PROD, MEM_ID, MEM_NAME, MEM_HP, MEM_MAIL
                , MEM_DELETE
            FROM CART INNER JOIN MEMBER ON (CART_MEMBER = MEM_ID)
        )
		SELECT
		    PROD_ID,    PROD_NAME,    PROD_LGU,
		    PROD_BUYER,    PROD_COST,    PROD_PRICE,
		    PROD_SALE,    PROD_OUTLINE,    PROD_DETAIL,
		    PROD_IMG,    PROD_TOTALSTOCK,    
		    TO_CHAR(PROD_INSDATE, 'YYYY-MM-DD') PROD_INSDATE,
		    PROD_PROPERSTOCK,    PROD_SIZE,    PROD_COLOR,
		    PROD_DELIVERY,    PROD_UNIT,    PROD_QTYIN,
		    PROD_QTYSALE,    PROD_MILEAGE
		    , LPROD_NM
		    , BUYER_ID "buyer.buyerId"
		    , BUYER_NAME "buyer.buyerName"
		    , BUYER_ADD1 "buyer.buyerAdd1"
		    , BUYER_COMTEL "buyer.buyerComtel"
		    , PROD_CNT "buyer.prodCnt"
            , MEM_NAME, MEM_HP, MEM_MAIL
            , MEM_DELETE, MEM_ID
		FROM  PRODVIEW INNER JOIN BUYERCNT ON (PROD_BUYER = BUYER_ID)
                LEFT OUTER JOIN CARTMEM ON(PROD_ID = CART_PROD) 
		WHERE PROD_ID = #{prodId}
	</select>
	
	<sql id="FromClause">
		FROM PROD INNER JOIN LPROD ON(PROD_LGU = LPROD_GU)
	              INNER JOIN BUYER ON(PROD_BUYER = BUYER_ID)
	</sql>
	<sql id="searchFrag">
	 	<trim prefix="WHERE" prefixOverrides="AND">
	    	<if test="detailCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodLgu)">
	    		AND	PROD_LGU = #{detailCondition.prodLgu}
	    	</if>
	    	<if test="detailCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodBuyer)">
	    		AND PROD_BUYER  = #{detailCondition.prodBuyer}
	    	</if>
	    	<if test="detailCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodName)">
	    		AND INSTR(PROD_NAME, #{detailCondition.prodName}) > 0
	    	</if>
	    </trim>
	</sql>
	
	<select id="selectTotalRecord" parameterType="PagingVO" resultType="int">
		SELECT COUNT(*)
		<include refid="FromClause" />
		<include refid="searchFrag" />
	</select>
	
	<select id="selectProdList" resultType="ProdVO" parameterType="PagingVO">
		SELECT B.*
		FROM(
			SELECT A.*, ROWNUM RNUM
			FROM(
			    SELECT PROD_ID, PROD_NAME
			    , PROD_MILEAGE
			    , LPROD_NM
			    , BUYER_NAME "buyer.buyerName"
			    , (SELECT COUNT(DISTINCT CART_MEMBER) FROM CART WHERE CART_PROD = PROD_ID)
			        MEM_CNT
			    <include refid="FromClause" />
			    <include refid="searchFrag" />
			    ORDER BY PROD_LGU ASC, PROD.ROWID DESC
			) A
		) B
		<![CDATA[  
			WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
	</select>
	<insert id="insertProd" parameterType="ProdVO">
		<selectKey order="BEFORE" resultType="string" keyProperty="prodId">
			SELECT #{prodLgu}||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PROD_ID, 5))), 0)+1, 6, '0')
			FROM PROD
			WHERE PROD_LGU = #{prodLgu}
		</selectKey>
		INSERT INTO PROD (
		    PROD_ID,
		    PROD_NAME,
		    PROD_LGU,
		    PROD_BUYER,
		    PROD_COST,
		    PROD_PRICE,
		    PROD_SALE,
		    PROD_OUTLINE,
		    PROD_DETAIL,
		    PROD_IMG,
		    PROD_TOTALSTOCK,
		    PROD_INSDATE,
		    PROD_PROPERSTOCK,
		    PROD_SIZE,
		    PROD_COLOR,
		    PROD_DELIVERY,
		    PROD_UNIT,
		    PROD_QTYIN,
		    PROD_QTYSALE,
		    PROD_MILEAGE
		) VALUES (
			#{prodId,jdbcType=VARCHAR},
			#{prodName,jdbcType=VARCHAR},
			#{prodLgu,jdbcType=CHAR},
			#{prodBuyer,jdbcType=CHAR},
			#{prodCost,jdbcType=NUMERIC},
			#{prodPrice,jdbcType=NUMERIC},
			#{prodSale,jdbcType=NUMERIC},
			#{prodOutline,jdbcType=VARCHAR},
			#{prodDetail,jdbcType=CLOB},
			#{prodImg,jdbcType=VARCHAR},
			#{prodTotalstock,jdbcType=NUMERIC},
			SYSDATE,
			#{prodProperstock,jdbcType=NUMERIC},
			#{prodSize,jdbcType=VARCHAR},
			#{prodColor,jdbcType=VARCHAR},
			#{prodDelivery,jdbcType=VARCHAR},
			#{prodUnit,jdbcType=VARCHAR},
			#{prodQtyin,jdbcType=NUMERIC},
			#{prodQtysale,jdbcType=NUMERIC},
			#{prodMileage,jdbcType=NUMERIC}
		)
	</insert>
	<update id="updateProd" parameterType="ProdVO">
		UPDATE PROD
		SET
		PROD_NAME = #{prodName,jdbcType=VARCHAR}
		, PROD_COST = #{prodCost,jdbcType=NUMERIC}
		, PROD_PRICE = #{prodPrice,jdbcType=NUMERIC}
		, PROD_SALE = #{prodSale,jdbcType=NUMERIC}
		, PROD_OUTLINE = #{prodOutline,jdbcType=VARCHAR}
		, PROD_DETAIL = #{prodDetail,jdbcType=CLOB}
		, PROD_TOTALSTOCK = #{prodTotalstock,jdbcType=NUMERIC}
		, PROD_PROPERSTOCK = #{prodProperstock,jdbcType=NUMERIC}
		, PROD_SIZE = #{prodSize,jdbcType=VARCHAR}
		, PROD_COLOR = #{prodColor,jdbcType=VARCHAR}
		, PROD_DELIVERY = #{prodDelivery,jdbcType=VARCHAR}
		, PROD_UNIT = #{prodUnit,jdbcType=VARCHAR}
		, PROD_QTYIN = #{prodQtyin,jdbcType=NUMERIC}
		, PROD_QTYSALE = #{prodQtysale,jdbcType=NUMERIC}
		, PROD_MILEAGE = #{prodMileage,jdbcType=NUMERIC}
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(prodImg)">
		, PROD_IMG = #{prodImg,jdbcType=VARCHAR}
		</if>
		WHERE PROD_ID = #{prodId}
	</update>
</mapper>


























